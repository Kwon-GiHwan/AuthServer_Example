FROM python:3.10.0-alpine

#mysql dependencies

RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev \
    && apk add --no-cache mariadb-dev\
    && apk del build-deps

#mysql dependencies
#RUN apk --no-cache add --virtual build-dependencies \
#      build-base \
#      py-mysqldb \
#      gcc \
#      libc-dev \
#      libffi-dev \
#      mariadb-dev \
#      && pip install -qq -r requirements.txt \
#      && rm -rf .cache/pip \
#      && apk del build-dependencies


ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

WORKDIR /app

RUN apk add mpc1-dev
RUN apk add build-base
#RUN apk --update add py-mysqldb


RUN apk add --no-cache \
        curl \
        gcc \
        libressl-dev \
        musl-dev \
        libffi-dev && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile=minimal && \
    source $HOME/.cargo/env && \
    pip --no-cache-dir install poetry==1.4.2 && \
    apk del \
        curl \
        gcc \
        libressl-dev \
        musl-dev \
        libffi-dev

RUN pip --no-cache-dir install poetry==1.4.2

COPY pyproject.toml /app/
COPY poetry.lock /app/

RUN poetry config virtualenvs.create false --local
RUN poetry install --no-root && rm -rf $POETRY_CACHE_DIR
#RUN poetry env use python3
COPY . /app

#RUN poetry install --without dev


#ENTRYPOINT ["poetry", "env", "info", "--path"]
#RUN source /app/.venv/bin/activate
ENTRYPOINT ["poetry", "run", "python3", "main.py"]